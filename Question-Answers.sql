--Analysis Tasks:
--1. Patient Visit Analysis:
--Write a query to find the top 5 patients with the most frequent visits within the last year. Include the total number of visits and the last appointment date for each patient.

SELECT TOP 5 p.patient_id, CONCAT(p.first_name, ' ', p.last_name) AS patient_name, COUNT(*) Visites, MAX(a.appointment_date) AS last_appointment
FROM Patients p
	JOIN Appointments a 
		ON p.patient_id = a.patient_id
WHERE a.appointment_date >= DATEADD(YEAR, -1, (SELECT MAX(appointment_date) FROM Appointments))
GROUP BY p.patient_id, 
		 CONCAT(p.first_name, ' ', p.last_name)
ORDER BY Visites DESC

--2. Revenue by Doctor:
--Write a query to calculate the total revenue generated by each doctor. Include only the appointments WHERE insurance_covered = FALSE. Display the doctor’s name, specialization, and total revenue.

SELECT d.full_name,
       d.specialization,
       SUM(b.total_cost) AS revenue
FROM   appointments a
       JOIN treatments t
         ON a.appointment_id = t.appointment_id
       JOIN billing b
         ON t.appointment_id = b.appointment_id
       JOIN doctors d
         ON a.doctor_id = d.doctor_id
WHERE  b.insurance_covered = 0
GROUP  BY d.full_name,
          d.specialization
ORDER  BY revenue DESC 


--3. Follow-Up Analysis:
--Create a CTE to find all patients who required a follow-up visit in the lASt 6 months but have not completed one. Display the patient’s ID, name, and date of their lASt appointment.

WITH follow_up_cte AS (
    SELECT 
        p.patient_id,
        CONCAT(p.first_name, ' ', p.lASt_name) AS patient_name,
        MAX(a.appointment_date) AS lASt_appointment_date
    FROM 
        Patients p
    JOIN 
        Appointments a ON p.patient_id = a.patient_id
    WHERE 
        a.follow_up_required = 1
        AND a.appointment_date >= DATEADD(MONTH, -6, (SELECT MAX(appointment_date) FROM appointments))
    GROUP BY
        p.patient_id, CONCAT(p.first_name, ' ', p.lASt_name)
)
SELECT *
FROM follow_up_cte
WHERE patient_id NOT IN (
    SELECT patient_id
    FROM Appointments
    WHERE appointment_date > follow_up_cte.lASt_appointment_date
)
ORDER BY  patient_id;


--4. Window Function for Billing:
--Write a query that ranks all appointments by their billing amount within each patient’s history. Include the patient’s name, appointment date, and rank, and sort the results by patient and rank.

WITH main AS (
    SELECT 
        CONCAT(p.first_name, ' ', p.lASt_name) AS NAME,
        a.appointment_id,
        a.appointment_date,
        SUM(b.total_cost) AS total_cost
    FROM 
        Patients p
    JOIN 
        Appointments a ON p.patient_id = a.patient_id
    JOIN 
        Billing b ON a.appointment_id = b.appointment_id
    GROUP BY
        CONCAT(p.first_name, ' ', p.lASt_name), a.appointment_id, a.appointment_date
)
SELECT 
    NAME, 
    appointment_date, 
    total_cost,
    DENSE_RANK() OVER (PARTITION BY name ORDER BY  total_cost DESC) AS rnk
FROM 
    main
ORDER BY  
    name, rnk;


--5. High-Cost Treatment Identification:
--Write a query using window functions to identify treatments that are in the top 10% of costs relative to all treatments. Display the treatment code, description, cost, and the percentile rank.

-- Approach 1:

WITH ranked_treatments AS (
    SELECT 
        treatment_cost, 
        treatment_code,
        NTILE(10) OVER (ORDER BY  treatment_cost DESC) AS cost_percentile
    FROM Treatments
)
SELECT 
    treatment_cost, 
    treatment_code,
    cost_percentile,
    PERCENT_RANK() OVER (ORDER BY  treatment_cost DESC) AS prnk
FROM ranked_treatments
WHERE cost_percentile = 1  -- Get the top 10% (1st bucket)
ORDER BY  prnk DESC;

-------------------------------------------------------------------------------------------------------------

--Approach 2: 

WITH ranked_treatments AS (
    SELECT 
        treatment_cost, 
        treatment_code,
        PERCENT_RANK() OVER (ORDER BY  treatment_cost DESC) AS prnk
    FROM Treatments
)
, top_10_pct_treatments AS (
    SELECT 
        treatment_cost, 
        treatment_code
    FROM ranked_treatments
    WHERE prnk <= 0.1  -- This ensures we are SELECTing the top 10%
)
SELECT *, 
       PERCENT_RANK() OVER (ORDER BY  treatment_cost DESC) AS prnk
FROM top_10_pct_treatments
ORDER BY  prnk DESC;



--6. Doctor Experience Impact:
--Create a CTE that finds the average treatment cost for each doctor. Write a query to compare this with the average treatment cost across all doctors, 
--and identify those doctors whose average treatment cost is higher than the overall average. Display the doctor’s name, specialization, experience, and average treatment cost.

--Using Sub-Query:
SELECT d.doctor_id,
       AVG(t.treatment_cost)
FROM   treatments t
       JOIN appointments a
         ON t.appointment_id = a.appointment_id
       JOIN doctors d
         ON a.doctor_id = d.doctor_id
GROUP  BY d.doctor_id
HAVING AVG(t.treatment_cost) > (SELECT AVG(treatment_cost) FROM   treatments)

--Using CTE:
WITH AVG_cost_per_doc AS(
	SELECT d.doctor_id, AVG(t.treatment_cost) AS AVG_cost FROM Treatments t
		JOIN Appointments a 
			ON t.appointment_id = a.appointment_id
		JOIN Doctors d 
			ON a.doctor_id = d.doctor_id
	GROUP BY d.doctor_id
)
SELECT * FROM AVG_cost_per_doc
WHERE AVG_cost > (SELECT AVG(treatment_cost) FROM Treatments)
ORDER BY  AVG_cost 

--7. Complex JOIN Analysis:
--Write a query to find the total cost of treatments for each patient, grouped by their diagnosis. 
--Include the patient’s name, diagnosis, and total treatment cost for that diagnosis.

SELECT p.patient_id,a.diagnosis, SUM(b.total_cost) AS treatment_cost
FROM   patients p
       JOIN appointments a
         ON p.patient_id = a.patient_id
       JOIN treatments t
         ON a.appointment_id = t.appointment_id
       JOIN billing b
         ON t.appointment_id = b.appointment_id
GROUP  BY p.patient_id,
          a.diagnosis
ORDER  BY p.patient_id 

--8. Patient Lifetime Value:
--Create a query to calculate the lifetime value (LTV) of each patient, defined AS the total amount billed over all appointments.
--Include only patients whose insurance_covered was FALSE for at least 50% of their appointments.

WITH 
total_appointments AS(
	SELECT p.patient_id, count(a.appointment_id) total_appointments FROM Billing b
	JOIN Appointments a ON b.appointment_id = a.appointment_id
	JOIN Patients p ON a.patient_id = p.patient_id
	GROUP BY p.patient_id 
),

insurance_covered AS (
SELECT p.patient_id, COUNT(a.appointment_id) insuarance_covered_visit FROM Patients p
JOIN Appointments a ON p.patient_id = a.patient_id
JOIN Billing b ON a.appointment_id = b.appointment_id
WHERE b.insurance_covered = 1
GROUP BY p.patient_id

),

required_patients AS(
	SELECT ta.patient_id, (ic.insuarance_covered_visit / ta.total_appointments * 1.00) AS fraction FROM total_appointments ta
	JOIN insurance_covered ic ON ta.patient_id = ic.patient_id
	WHERE (ic.insuarance_covered_visit / ta.total_appointments * 1.00) = 1
)

SELECT p.patient_id, SUM(b.total_cost) AS total_cost 
FROM Patients p 
JOIN Appointments a ON p.patient_id = a.patient_id
JOIN Billing b ON a.appointment_id = b.appointment_id
WHERE p.patient_id IN (SELECT patient_id FROM required_patients)
GROUP BY p.patient_id
ORDER BY total_cost DESC


--9. Age Group Distribution:
--Use a CTE and window functions to classify patients into age groups (<18, 18-35, 36-50, 51-70, >70) and calculate the number of visits and
--total revenue generated by each age group within the last 2 years.

WITH bucket AS(
	SELECT
	CASE 
		WHEN DATEDIFF(YEAR, p.date_of_birth, GETDATE()) > 70 THEN '>70'
		WHEN DATEDIFF(YEAR, p.date_of_birth, GETDATE()) between 51 and 70 THEN '51-70'
		WHEN DATEDIFF(YEAR, p.date_of_birth, GETDATE()) between 36 and 50 THEN '36-50'
		WHEN DATEDIFF(YEAR, p.date_of_birth, GETDATE()) between 18 and 35 THEN '18-35'
	ELSE '<18'
	END AS Age_bucket,
	COUNT(*) AS total_visits,
	SUM(b.total_cost) AS total_revenue

	FROM Patients p
	JOIN Appointments a ON p.patient_id = a.patient_id
	JOIN Billing b ON a.appointment_id = b.appointment_id
	GROUP BY p.date_of_birth
)

SELECT * 
FROM bucket
ORDER BY Age_bucket

--10. Insurance Dependency:
--Write a query to analyze the percentage of appointments per doctor WHERE insurance_covered was TRUE. 
--Include the doctor’s name and the percentage of insurance-covered appointments.

WITH total_appointments AS(
	SELECT d.full_name, count(*) AS total_appointments
	FROM Doctors d
	JOIN Appointments a ON d.doctor_id = a.doctor_id
	JOIN Billing b ON a.appointment_id = b.appointment_id
	GROUP BY d.full_name
),
insurance_covered_appointments AS (
	SELECT d.full_name, count(*) AS covered_appointments
	FROM Doctors d
	JOIN Appointments a ON d.doctor_id = a.doctor_id
	JOIN Billing b ON a.appointment_id = b.appointment_id
	WHERE b.insurance_covered = 1
	GROUP BY d.full_name
)

SELECT ta.full_name, CAST((ic.covered_appointments * 1.00 /ta.total_appointments * 100.00) AS DECIMAL(10,2)) pct
FROM total_appointments ta 
JOIN insurance_covered_appointments ic
ON ta.full_name = ic.full_name
